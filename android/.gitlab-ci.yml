# This file is a template, and might need editing before it works on your project.
# Read more about how to use this script on this blog post https://about.gitlab.com/2019/01/28/android-publishing-with-gitlab-and-fastlane/
# You will also need to configure your build.gradle, Dockerfile, and fastlane configuration to make this work.
# If you are looking for a simpler template that does not publish, see the Android template.

variables:
  DOCKER_DRIVER: overlay2
  # Create the certificates inside this directory for both the server
  # and client. The certificates used by the client will be created in
  # /certs/client so we only need to share this directory with the
  # volume mount in `config.toml`.
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - environment
  - build
#  - test


.updateContainerJob:
  image: docker:stable
  stage: environment
  variables:
    DOCKER_DRIVER: overlay2
  # Create the certificates inside this directory for both the server
  # and client. The certificates used by the client will be created in
  # /certs/client so we only need to share this directory with the
  # volume mount in `config.toml`.
    DOCKER_TLS_CERTDIR: "/certs"
  services:
    - docker:19.03.0-dind
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull --quiet $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

updateContainer:
  extends: .updateContainerJob
  only:
    changes:
      - Dockerfile

ensureContainer:
  extends: .updateContainerJob
  allow_failure: true
  before_script:
    - "mkdir -p ~/.docker && echo '{\"experimental\": \"enabled\"}' > ~/.docker/config.json"
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    # Skip update container `script` if the container already exists
    # via https://gitlab.com/gitlab-org/gitlab-foss/issues/26866#note_97609397 -> https://stackoverflow.com/a/52077071/796832
    - docker manifest inspect $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG > /dev/null && exit || true


.build_job:
  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  stage: build
  before_script:
    # We store this binary file in a variable as hex with this command: `xxd -p android-app.jks`
    # Then we convert the hex back to a binary file
#    - echo "$signing_jks_file_hex" | xxd -r -p - > android-signing-keystore.jks
    - "export VERSION_CODE=$CI_PIPELINE_IID && echo $VERSION_CODE"
    - "export VERSION_SHA=`echo ${CI_COMMIT_SHA:0:8}` && echo $VERSION_SHA"
  after_script:
#    - rm -f android-signing-keystore.jks || true
  artifacts:
    paths:
      - app/build/outputs

builddemoDebug:
  extends: .build_job
  script:
    - bundle exec fastlane demoDebug2firebase
  only:
    - master

builddevDebug:
  extends: .build_job
  script:
    - bundle exec fastlane devDebug2firebase
  only:
    - master

buildProdDebug:
  extends: .build_job
  script:
    - bundle exec fastlane prodDebug2firebase
  only:
    - master
#  when: manual

#testDebug:
#  image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
#  stage: test
#  dependencies:
#    - buildDebug
#  script:
#    - bundle exec fastlane test

